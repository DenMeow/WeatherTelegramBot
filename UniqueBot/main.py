import asyncio

MY_TOKEN = "6615733860:AAHKJZNX9U6IbZaPsk24RZ2_YU_U1VSMxDo"

import datetime
import requests
import schedule
import logging
from database import add_user, enable_notifications, disable_notifications
import math
import time
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text


logging.basicConfig(level=logging.INFO)

bot = Bot(token=MY_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await add_user(user_id, username, first_name, last_name)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ"]
    keyboard.add(*buttons)
    photo = open('hi.jpg', 'rb')
    await bot.send_photo(message.chat.id, photo)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} \n–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ãüôÇ", reply_markup=keyboard)

@dp.message_handler(Text(equals="–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ"))
async def OnNotification(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ"]
    keyboard.add(*buttons)

    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30 –ú–æ—Å–∫–≤–∞):", reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await dp.current_state(user=message.from_user.id).update_data(user_id=message.from_user.id)



@dp.message_handler(lambda message: message.text and ':' in message.text)
async def save_notification_time(message: types.Message):
    user_data = await dp.current_state(user=message.from_user.id).get_data()
    user_id = user_data.get('user_id')

    if user_id:
        try:
            time_, city = message.text.split(maxsplit=1)
            await enable_notifications(user_id, city, time_)
            photo = open('On.jpg', 'rb')
            await bot.send_photo(message.chat.id, photo)
            await message.reply(f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –≤–∫–ª—é—á–µ–Ω–æ –Ω–∞ {time_} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")


        except ValueError:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
    else:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.")


@dp.message_handler(Text(equals="–í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ"))
async def OFFNotification(message: types.Message):
    user_data = await dp.current_state(user=message.from_user.id).get_data()
    user_id = user_data.get('user_id')
    await disable_notifications(user_id)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ"]
    keyboard.add(*buttons)

    await message.reply("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!", reply_markup=keyboard)


@dp.message_handler()
async def get_weather(message: types.Message):
    try:
        response = requests.get(f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&lang=ru&units=metric&appid=1d0e19233121ae2aeb9360c2328ef631")
        data = response.json()
        city = data["name"]
        cur_temp = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]

        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

        # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        code_to_smile = {
            "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
            "Clouds": "–û–±–ª–∞—á–Ω–æ üå•Ô∏è",
            "Rain": "–î–æ–∂–¥—å ‚òîÔ∏è",
            "Drizzle": "–î–æ–∂–¥—å üåßÔ∏è",
            "Thunderstorm": "–ì—Ä–æ–∑–∞ üå©Ô∏è",
            "Snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
            "Mist": "–¢—É–º–∞–Ω üå´Ô∏è"
        }
        # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        weather_description = data["weather"][0]["main"]

        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            # –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ—Ç
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞..."

        await message.reply(f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C {wd}\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure / 1.333)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å \n"
            f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
            f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
        )

    except:
        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!")

async def send_message():
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s...", 830637790)
    await bot.send_message(830637790, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


async def schedule_task():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = time.localtime()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏
    hour = 20
    minute = 52

    if now.tm_hour > hour or (now.tm_hour == hour and now.tm_min >= minute):
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ 15:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        tomorrow = time.time() + 24 * 60 * 60
        tomorrow_time = time.localtime(tomorrow)

        schedule_time = f"{tomorrow_time.tm_year}-{tomorrow_time.tm_mon}-{tomorrow_time.tm_mday} {hour}:{minute}"
        print(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ {schedule_time}")
        schedule.every().day.at(f"{hour:02d}:{minute:02d}").do(send_message)
    else:
        # –ò–Ω–∞—á–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_time = f"{now.tm_year}-{now.tm_mon}-{now.tm_mday} {hour}:{minute}"
        print(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ {today_time}")
        schedule.every().day.at(f"{hour:02d}:{minute:02d}").do(send_message)



# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def main():
    await schedule_task()
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
