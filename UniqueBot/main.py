import datetime
import requests
import math
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from apscheduler.schedulers.asyncio import AsyncIOScheduler


bot = Bot(token='6615733860:AAHKJZNX9U6IbZaPsk24RZ2_YU_U1VSMxDo')
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
user_notifications = {}


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ", "–í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ"]
    keyboard.add(*buttons)
    photo = open('hi.jpg', 'rb')
    await bot.send_photo(message.chat.id, photo)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} \n–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ãüôÇ", reply_markup=keyboard)

@dp.message_handler(Text(equals="–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ"))
async def OnNotification(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30 –ú–æ—Å–∫–≤–∞):")
    user_notifications[message.chat.id] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.message_handler(Text(equals="–í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ"))
async def OffNotification(message: types.Message):


@dp.message_handler()
async def get_weather(message: types.Message):
    try:
        response = requests.get(f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&lang=ru&units=metric&appid=1d0e19233121ae2aeb9360c2328ef631")
        data = response.json()
        city = data["name"]
        cur_temp = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]

        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

        # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        code_to_smile = {
            "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
            "Clouds": "–û–±–ª–∞—á–Ω–æ üå•Ô∏è",
            "Rain": "–î–æ–∂–¥—å ‚òîÔ∏è",
            "Drizzle": "–î–æ–∂–¥—å üåßÔ∏è",
            "Thunderstorm": "–ì—Ä–æ–∑–∞ üå©Ô∏è",
            "Snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
            "Mist": "–¢—É–º–∞–Ω üå´Ô∏è"
        }
        # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        weather_description = data["weather"][0]["main"]

        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            # –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ—Ç
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞..."

        await message.reply(f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C {wd}\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure / 1.333)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å \n"
            f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
            f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
        )

    except:
        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!")


if __name__ == "__main__":
    scheduler.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    executor.start_polling(dp)
